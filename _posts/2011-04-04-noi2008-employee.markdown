---
author: admin
comments: true
date: 2011-04-04 06:06:34+00:00
layout: post
slug: noi2008-employee
title: NOI2008 志愿者招募
wordpress_id: 399
categories:
- 解题报告
tags:
- 网络流
- 解题报告
---



好题啊！充分显示了你对网络流的理解。
我是没做出来，看了题解的。
对于每一天，我们可以列一个不等式，要求服务这一天的志愿者的数量和大于要求值。在要求值的那一边添上个未知的大于0的常量，就得到了一个等式。
就拿样例来说：


> X1>=A1
X1+X2>=A2
X2+X3>=A3


转化成


> X1=A1+Y1
X1+X2=A2+Y2
X2+X3=A3+Y3


Xi表示第i类志愿者的数目，Yi都是大于0的变量。

已经很像网络流的流量平衡限制了！

我们把等式每相邻的两个相减，特殊的，前后加上个0=0的等式，得到


> -X1+Y1+A1=0

-X2-A1+A2-Y1+Y2=0

X1-X3-A2-Y2+A3+Y3=0

X2+X3-A3-Y3=0


发现Xi和-Xi以及Yi和-Yi出现且仅出现一次（因为志愿者的工作时间是连续的），而Ai均为常数。为了使建模更加明显，我们代入A的值。


> -X1+Y1+2=0

-X2-Y1+Y2+1=0

X1-X3-Y2+Y3+1=0

X2+X3-Y3-4=0


我们把每个等式看成一个点，上面的就是流量平衡条件！有-Xi的点向有Xi的边连边，有-Yi的点向Yi的点连边，而常数只要用源和汇补充就行了（即正数是进来，负数是出去）！建模已经很明显了。


NOI2008 志愿者招募



    
    
    /*
    ID: dxmtb
    PROG: NOI2008 志愿者招募
    TIME: 2011.03.31
    STATE: Solved
    MEMO: 费用流
    */
    #include <cstdio>
    #include <cstring>
    #include <deque>
    using namespace std;
    
    const int MAXN=2005;
    const int oo=0x7fffffff;
    
    struct Node
    {
    	int v,c,w;
    	Node *next,*back;
    	Node (){}
    	Node (int _v,int _c,int _w,Node *_next,Node *_back=NULL):
    		v(_v),c(_c),w(_w),next(_next),back(_back){}
    	void *operator new (unsigned ,void *p){return p;}
    }*adj[MAXN],pool[MAXN*20],*mem=pool;
    
    inline void addedge(int u,int v,int c,int w)
    {
    	adj[u]=new (mem++)Node(v,c,w,adj[u]);
    	adj[v]=new (mem++)Node(u,0,-w,adj[v],adj[u]);
    	adj[u]->back=adj[v];
    }
    
    int S,T,N,M;
    int A[MAXN];
    int dis[MAXN];
    int piS;
    
    bool label()
    {
    	deque<int> q;
    	q.push_back(T);
    	for(int i=S;i<=T;i++)
    		dis[i]=oo;
    	dis[T]=0;
    	while(q.size())
    	{
    		int u=q.front();
    		int t;
    		q.pop_front();
    		for(Node *p=adj[u];p;p=p->next)
    			if (p->back->c && dis[p->v]>(t=dis[u]+p->back->w))
    			{
    				dis[p->v]=t;
    				if (q.empty() || t<dis[q.front()])
    					q.push_front(p->v);
    				else 
    					q.push_back(p->v);
    			}
    	}
    	for(int u=S;u<=T;u++)
    		for(Node *p=adj[u];p;p=p->next)
    			p->back->w=p->back->w+dis[u]-dis[p->v];
    	piS+=dis[S];
    	return dis[S]!=oo;
    }
    
    bool vis[MAXN];
    int mincost;
    int augment(int u,int m)
    {
    	vis[u]=true;
    	if (u==T) return mincost+=m*piS,m;
    	int l=m;
    	for(Node *p=adj[u];p;p=p->next)
    		if (p->c && !p->w && !vis[p->v])
    		{
    			int t=augment(p->v,min(m,p->c));
    			p->c-=t,p->back->c+=t;
    			l-=t;
    			if (!l)
    				return m;
    		}
    	return m-l;
    }
    
    void solve()
    {
    	while(label())
    		do memset(vis,false,sizeof(vis));
    		while (augment(S,oo));
    }
    
    int main()
    {
    	freopen("employee.in","r",stdin);
    	freopen("employee.out","w",stdout);
    	int N,M;
    	scanf("%d%d",&N;,&M;);
    	S=0,T=N+2;
    	for(int i=2;i<=N+1;i++)
    		scanf("%d",A+i);
    	for(int i=1;i<=M;i++)
    	{
    		int S,T,C;
    		scanf("%d%d%d",&S;,&T;,&C;);
    		S++,T++;
    		addedge(S-1,T,oo,C);
    	}
    	for(int i=1;i<=N+1;i++)
    	{
    		int t=A[i]-A[i+1];
    		if (t>0)
    			addedge(i,T,t,0);
    		else
    			addedge(S,i,-t,0);
    	}
    	for(int i=1;i<=N;i++)
    		addedge(i+1,i,oo,0);
    	solve();
    	printf("%d\n",mincost);
    	return 0;
    }
    
