---
author: admin
comments: true
date: 2011-03-02 13:55:05+00:00
layout: post
slug: poj1077
title: POJ1077 Eight
wordpress_id: 227
categories:
- 解题报告
tags:
- A*
- poj
- 解题报告
---

八数码问题，刚学搜索时就写过了。
这里使用的是A*算法，估价函数采用不在原位置的点数，可知一步之内最短只有一个点回归原位，所以估价函数是相容的。
还尝试了IDA*，效果不太好，空间足够时就不要考虑了吧。

    
    
    /*
    ID: dxmtb
    PROG: poj1077 Eight
    TIME: 2011.03.02
    STATE: Solved
    MEMO: A*搜索
    */
    #include <cstdio>
    #include <cstring>
    #include <map>
    #include <queue>
    using namespace std;
    
    const int way[4][2]={ {0,1},{0,-1},{1,0},{-1,0}};
    const int op[4]={1,0,3,2};
    const int let[4]={'r','l','d','u'};
    const int frac[9]={1,1,2,6,24,120,720,5040,40320};
    
    struct Node
    {
    	int S,h,g,f;
    	unsigned char path[40];
    	Node(int _S,int _h,int _g):S(_S),h(_h),g(_g){f=h+g;}
    	Node(){}
    };
    inline bool operator < (const Node &a;,const Node &b;)
    {
    	return a.f>b.f;
    }
    
    int tmp[9];
    inline int compress(int s[][3])
    {
    	memcpy(tmp,s,sizeof(tmp));
    	int canto=0;
    	for(int i=0;i<9;i++)
    	{
    		int t=0;
    		for(int j=0;j<i;j++)
    			if (tmp[j]<tmp[i])
    				t++;
    		canto+=frac[i]*t;
    	}
    	return canto;
    }
    
    inline int getg(int s[][3])
    {
    	int t=0;
    	for(int i=0;i<3;i++)
    		for(int j=0;j<3;j++)
    			if (s[i][j]!=9 && s[i][j]!=i*3+j+1)
    				t++;
    	return t;
    }
    
    bool used[10];
    inline void extract(int S,int s[][3],int &x;,int &y;)
    {
    	for(int i=8;i>=0;i--)
    	{
    		tmp[i]=S/frac[i];
    		S%=frac[i];
    	}
    	memset(used,false,sizeof(used));
    	for(int i=8;i>=0;i--)
    	{
    		tmp[i]++;
    		for(int j=1;j<=tmp[i];j++)
    			if (used[j])
    				tmp[i]++;
    		used[tmp[i]]=true;
    	}
    	memcpy(s,tmp,sizeof(tmp));
    	for(int i=0;i<3;i++)
    		for(int j=0;j<3;j++)
    			if (s[i][j]==9)
    			{
    				x=i,y=j;
    				return ;
    			}
    }
    
    map<int,int> hash;
    priority_queue<node> q;
    int s[3][3];
    
    void Astart()
    {
    	Node begin(compress(s),0,getg(s));
    	map<int,int>::iterator it;
    	hash[begin.S]=begin.h+begin.g;
    	q.push(begin);
    	while(q.size())
    	{
    		Node now=q.top();q.pop();
    		if (hash[now.S]!=now.f)
    			continue;
    		int x,y;
    		extract(now.S,s,x,y);
    		if (now.g==0)
    		{
    			for(int i=0;i<now.h;i++)
    				printf("%c",let[now.path[i]]);
    			printf("n");
    			return ;
    		}
    		Node expand(now);
    		expand.h++;
    		for(int i=0;i<4;i++)
    		if (i!=op[now.path[now.h-1]])
    		{
    			int nx=x+way[i][0],ny=y+way[i][1];
    			if (nx>=0&&nx;<3 && ny>=0&&ny;<3)
    			{
    				if (s[nx][ny]==nx*3+ny+1)
    					expand.g=now.g+1;
    				else if (s[nx][ny]==x*3+y+1)
    					expand.g=now.g-1;
    				else 
    					expand.g=now.g;
    				expand.path[expand.h-1]=i;
    				swap(s[nx][ny],s[x][y]);
    				expand.S=compress(s);
    			//	if (expand.g!=getg(s))
    			//		printf("wrong@n");
    				expand.f=expand.g+expand.h;
    				if ((it=hash.find(expand.S))!=hash.end())
    					if (it->second<=expand.f)
    					{
    						swap(s[nx][ny],s[x][y]);
    						continue;
    					}
    					else it->second=expand.f;
    				else hash[expand.S]=expand.f;
    				q.push(expand);
    				swap(s[nx][ny],s[x][y]);
    			}
    		}
    	}
    	printf("unsolvablen");
    }
    
    int main()
    {
    	for(int i=0;i<3;i++)
    		for(int j=0;j<3;j++)
    		{
    			char ch;
    			scanf(" %c",&ch;);
    			if (ch=='x')
    				s[i][j]=9;
    			else s[i][j]=ch-'0';
    		}
    	Astart();
    	return 0;
    }
    
