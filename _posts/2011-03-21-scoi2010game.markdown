---
author: admin
comments: true
date: 2011-03-21 23:25:01+00:00
layout: post
slug: scoi2010game
title: Scoi2010 游戏
wordpress_id: 336
categories:
- 解题报告
tags:
- 解题报告
---

我写的是并查集的算法，比匈牙利算法还慢！先是想了一个暴力的方法，后来认真一想我想的竟然是匈牙利算法。的确，匈牙利算法好像也就是暴搞。
将每一个属性1...10000表示成一个集合。对于一个装备属性（a，b），将a和b的集合连在一起（或者说加一条无向边(a,b)），并保证集合的代表元素是较大的。并记录是否有环产生。对于同一个集合的元素，设个数为p，那么如果集合的边存在环，必然可以使这p个属性都能满足，否则可以使任意p-1个属性满足。
之后枚举第i个属性能否被满足。假设前i-1个属性已经被满足，那么若第i个属性不是所在集合内最大的那个，必然还可以满足因为在满足前i-1个属性的方案中，对于不在和i一个集合的方案不受影响，和i在一个集合的方案也不会受影响，因为我们可以使集合内任意p-1个属性满足，而i又不是最后一个。就算i是集合中最大的一个元素，如果集合中的边存在环的话，还是可以满足i属性的。到不满足时就是答案了。

    
    
    /*
    ID: dxmtb
    PROG: Scoi2010 游戏 
    TIME: 2011.03.21
    STATE: Solved
    MEMO: 并查集
    */
    #include <cstdio>
    #include <algorithm>
    using namespace std;
    const int MAXN=10005;
    
    int N,M;
    int father[MAXN];
    bool all[MAXN];
    int getfather(int x)
    {
    	if (father[x]==x)
    		return x;
    	return father[x]=getfather(father[x]);
    }
    
    void join(int x,int y)
    {
    	int fx=getfather(x),fy=getfather(y);
    	if (fx==fy) all[fx]=true;
    	else
    	{
    		if (fx>fy) swap(fx,fy);
    		father[fx]=fy;
    		all[fy]=(all[fy]|all[fx]);
    	}
    }
    
    int main()
    {
    	freopen("1854.in","r",stdin);
    	M=10000;
    	scanf("%d",&N;);
    	for(int i=1;i<=M+1;i++)
    		father[i]=i;
    	for(int i=0;i<N;i++)
    	{
    		int a,b;
    		scanf("%d%d",&a;,&b;);
    		join(a,b);
    	}
    	for(int i=1;i<=M+1;i++)
    		if (getfather(i)==i && !all[i])
    		{
    			printf("%d\n",i-1);
    			return 0;
    		}
    }
    
