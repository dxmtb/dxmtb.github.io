---
author: admin
comments: true
date: 2011-02-24 13:07:08+00:00
layout: post
slug: dragon
title: NOI2002 贪吃的九头龙
wordpress_id: 171
categories:
- 解题报告
tags:
- noi
- 树形动态规划
- 解题报告
---

对于无解的情况，只要判断果子是否够吃就行，即：M+K-1>N则无解
我们可以注意到当N>=3时，最优解一定不会存在两个果子同时被一个小头所吃，因为可以让其中一个让另一个头吃，一方面减少了难受值，另一方面可以更满足每个头至少吃一个的条件。所以我们只用考虑两端都被大头吃的情况。
我们令状态d[i,j,0]表示i的父亲节点为小头吃，i的右边所有兄弟及其子树以及i这颗子树大头吃的一共有j个，最小的难受值。d[i,j,1]为i的父亲为大头吃。
则令child[i]为i的最左儿子，sibling[i]为i的右兄弟。
d[i,j,0]=d[sibling[i],k,0]+min{d[child[i],j-k,0],d[child[i],j-k-1,1]}
d[i,j,1]=d[sibling[i],k,1]+min{d[child[i],j-k,0],d[child[i],j-k-1,1]+w[i,father[i]]}
复杂度为O(NK^2)
对于N=2的情况，只要在两端都为0时加上代价即可。
代码：

    
    
    /*
    ID: dxmtb
    PROG: NOI2002 贪吃的九头龙
    TIME: 2011.02.24
    STATE: Solved
    MEMO: 树形dp
    */
    #include <cstdio>
    #include <queue>
    #include <cstring>
    using namespace std;
    const int MAXN=305;
    const int oo=100000000;
    
    int N,M,K;
    int d[MAXN][MAXN][2];
    int child[MAXN],sibling[MAXN],father[MAXN];
    int w[MAXN][MAXN],ww[MAXN][MAXN];
    
    bool vis[MAXN];
    void bfs()
    {
    	queue<int> q;
    	int u,former;
    	q.push(1);vis[1]=true;
    	while(q.size())
    	{
    		u=q.front();q.pop();
    		former=0;
    		for(int i=1;i<=N;i++)
    			if (w[u][i]!=oo && !vis[i])
    			{
    				vis[i]=true;father[i]=u;
    				if (former==0)
    					child[u]=i;
    				else
    					sibling[former]=i;
    				q.push(i);
    				former=i;
    			}
    		if (!former && sibling[u]==0)
    		{
    			d[u][0][0]=ww[father[u]][u];
    			d[u][0][1]=0;
    			d[u][1][0]=0;
    			d[u][1][1]=w[father[u]][u];
    		}
    	}
    }
    
    inline void Min(int &a;,int b)
    {
    	if (b<a)
    		a=b;
    }
    
    inline int min(int a,int b)
    {
    	return a<b?a:b;
    }
    
    void dp(int i,int j,int s)
    {
    	if (d[i][j][s]!=oo || !i) return ;
    	if (s==1)
    	{
    		for(int k=0;k<=j;k++)
    		{
    			dp(sibling[i],k,1);
    			dp(child[i],j-k,0);
    			if (j!=k) 
    			{
    				dp(child[i],j-k-1,1);
    				Min(d[i][j][1],d[sibling[i]][k][1]+
    				min(d[child[i]][j-k][0],
    				    d[child[i]][j-k-1][1]+w[i][father[i]]));
    			}
    			else
    			{
    				Min(d[i][j][1],d[sibling[i]][k][1]+
    				d[child[i]][j-k][0]);
    			}
    			if (!sibling[i])
    				break;
    		}
    	}
    	else
    	{
    		for(int k=0;k<=j;k++)
    		{
    			dp(sibling[i],k,0);
    			dp(child[i],j-k,0);
    			if (j!=k)
    			{
    				dp(child[i],j-k-1,1);
    				Min(d[i][j][0],d[sibling[i]][k][0]+
    				min(d[child[i]][j-k][0]+ww[i][father[i]],
    				    d[child[i]][j-k-1][1]));
    			}
    			else 
    			{
    				Min(d[i][j][0],d[sibling[i]][k][0]+
    				d[child[i]][j-k][0]+ww[i][father[i]]);
    			}
    			if (!sibling[i])
    				break;
    		}
    	}
    	if (d[i][j][s]==oo)
    		d[i][j][s]<<=1;
    //	printf("%d %d %d %dn",i,j,s,d[i][j][s]);
    }
    
    int main()
    {
    	freopen("dragon.in","r",stdin);
    	freopen("dragon.out","w",stdout);
    	scanf("%d%d%d",&N;,&M;,&K;);
    	for(int i=1;i<=N;i++)
    		for(int j=1;j<=N;j++)
    			w[i][j]=oo;
    	for(int i=N;i;i--)
    	{
    		int a,b,c;	
    		scanf("%d%d%d",&a;,&b;,&c;);
    		w[a][b]=w[b][a]=c;
    	}
    	if (M==2)
    		memcpy(ww,w,sizeof(w));
    	if (M+K-1>N)
    	{
    		printf("-1n");
    		return 0;
    	}
    	for(int i=0;i<=N;i++)
    		for(int j=0;j<K;j++)
    			d[i][j][0]=d[i][j][1]=oo;
    	bfs();
    	d[0][0][0]=d[0][0][1]=0;
    	dp(child[1],K-1,1);
    	printf("%dn",d[child[1]][K-1][1]);
    	return 0;
    }
    
