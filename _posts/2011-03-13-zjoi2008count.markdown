---
author: admin
comments: true
date: 2011-03-13 03:42:27+00:00
layout: post
slug: zjoi2008count
title: ZJOI2008 树的统计
wordpress_id: 297
categories:
- 解题报告
tags:
- 动态树
- 解题报告
---

还是动态树。没办法，这玩意在树的问题上太无敌了。在这里深深膜拜一下伟大的Tarjan，想出那么的简单而使用的的算法，什么splay，scc，lca，link-cut-tree，都被他搞得那么简单和随意！竟然有人问我信息学有什么出名的人，我不好意思说，你懂什么啊！
言归正传，这道题要注意更新最大值不要把哨兵节点也算上了，有可能其他点是负权！

    
    
    /*
    ID: dxmtb
    PROG: [ZJOI2008]树的统计Count
    TIME: 2011.03.13
    STATE: Solved
    MEMO: 动态树
    */
    #include <cstdio>
    #include <queue>
    using namespace std;
    
    const int MAXN=30005;
    
    struct ANode
    {
    	int v;
    	ANode *next;
    	ANode(int _v,ANode *_next):v(_v),next(_next){}
    	ANode(){}
    	void *operator new (unsigned ,void *p){return p;}
    }*adj[MAXN],pool[MAXN*2],*mem=pool;
    
    inline void addedge(int u,int v)
    {
    	adj[u]=new (mem++)ANode(v,adj[u]);
    	adj[v]=new (mem++)ANode(u,adj[v]);
    }
    
    struct Node
    {
    	int id;
    	int cost,maxcost,sumcost;
    	bool root;
    	Node *c[2],*father;
    	void rz()
    	{
    		maxcost=max(max(c[0]->maxcost,c[1]->maxcost),cost);
    		sumcost=cost+c[0]->sumcost+c[1]->sumcost;
    	}
    	void zig(bool);
    	void splay();
    }tree[MAXN],Tnull,*null=&Tnull;
    
    void Node::zig(bool d)
    {
    	Node *p=father;
    	p->c[d]=c[!d];
    	c[!d]->father=p;
    	p->rz();
    	if (p->father->c[0]==p) p->father->c[0]=this;
    	else if (p->father->c[1]==p) p->father->c[1]=this;
    	father=p->father;
    	p->father=this;
    	c[!d]=p;
    	rz();
    	if (p->root)
    		p->root=false,root=true;
    }
    
    void Node::splay()
    {
    	while(!root)
    	{
    		bool d=(father->c[1]==this);
    		if (father->root)
    		{
    			zig(d);
    			break;
    		}
    		bool dd=(father->father->c[1]==father);
    		if (d==dd) zig(d),zig(d);
    		else zig(d),zig(dd);
    	}
    }
    
    void access(Node *u)
    {
    	Node *v=null;
    	while(u!=null)
    	{
    		u->splay();
    		u->c[1]->root=true;
    		u->c[1]=v;
    		v->root=false;
    		u->rz();
    		v=u;
    		u=u->father;
    	}
    }
    
    void access2(Node *u)
    {
    	Node *v=null;
    	while(u!=null)
    	{
    		u->splay();
    		if (u->father==null)
    			printf("%d\n",max(u->cost,max(u->c[1]->maxcost,v->maxcost)));
    		u->c[1]->root=true;
    		u->c[1]=v;
    		v->root=false;
    		u->rz();
    		v=u;
    		u=u->father;
    	}
    }
    
    void access3(Node *u)
    {
    	Node *v=null;
    	while(u!=null)
    	{
    		u->splay();
    		if (u->father==null)
    			printf("%d\n",u->cost+u->c[1]->sumcost+v->sumcost);
    		u->c[1]->root=true;
    		u->c[1]=v;
    		v->root=false;
    		u->rz();
    		v=u;
    		u=u->father;
    	}
    }
    
    void change(int u,int to)
    {
    	access(tree+u);
    	tree[u].splay();
    	tree[u].cost=to;
    	tree[u].rz();
    }
    
    void qmax(int u,int v)
    {
    	access(tree+u);
    	access2(tree+v);
    }
    
    void qsum(int u,int v)
    {
    	access(tree+u);
    	access3(tree+v);
    }
    
    void bfs()
    {
    	queue<int> q;
    	q.push(1);
    	while(q.size())
    	{
    		int u=q.front();q.pop();
    		for(ANode *p=adj[u];p;p=p->next)
    			if (p->v!=1 && tree[p->v].father==null)
    			{
    				tree[p->v].father=tree+u;
    				q.push(p->v);
    			}
    	}
    }
    
    int main()
    {
    	int N,Q;
    	scanf("%d",&N;);
    	null->maxcost=-100000000;
    	for(int i=1;i<=N;i++)
    	{	
    		tree[i].id=i;
    		tree[i].root=true;
    		tree[i].c[0]=tree[i].c[1]=tree[i].father=null;
    	}
    	for(int i=0;i<N-1;i++)
    	{
    		int a,b;
    		scanf("%d%d",&a;,&b;);
    		addedge(a,b);
    	}
    	for(int i=1;i<=N;i++)
    	{
    		scanf("%d",&tree;[i].cost);
    		tree[i].sumcost=tree[i].maxcost=tree[i].cost;
    	}
    	bfs();
    	scanf("%d",&Q;);
    	while(Q--)
    	{
    		int u,v;
    		char com[10];
    		scanf(" %s",com);
    		scanf("%d%d",&u;,&v;);
    		if (com[0]=='C')
    			change(u,v);
    		else if (com[1]=='M')
    			qmax(u,v);
    		else if (com[1]=='S')
    			qsum(u,v);
    		else return -1;
    	}
    	return 0;
    }
    
