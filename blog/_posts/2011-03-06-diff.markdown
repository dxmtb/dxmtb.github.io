---
author: admin
comments: true
date: 2011-03-06 12:31:23+00:00
layout: post
slug: diff
title: SDOI2009 HH的项链
wordpress_id: 269
categories:
- 解题报告
tags:
- SDOI
- 树状数组
- 线段树
- 解题报告
---

这个题没做出来，是向xmz请教的。
这个题的解法并非对每个答案直接查询，而是对询问排序后回答。
记一个数组B，起初，对于每个颜色第一次出现的i，B[i]=1。
这时，对于左端点是1的询问(1,j)，答案即为sum[B[1]..B[j]]。
当处理完以i为左端点的讯问后，B[i]=B[i]-1,对i上颜色下一次出现的地方j，B[j]=B[j]+1，
这样左端点是i+1的询问，答案即为sum[B[i+1]..B[j]]。
区间和可以用树状数组或线段树维护，上面的算法好好体会吧。
<pre lang='CPP'>
/*
ID: dxmtb
PROG: SDOI2009 HH的项链
TIME: 2011.03.06
STATE: Solved
MEMO: 树状数组
*/
#include <cstdio>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;
const int MAXN=50005;
const int MAXM=200005;

int A[MAXN],next[MAXN],C[MAXN];
int N,M;

void add(int u,int v)
{
	while(u<=N)
	{
		C[u]+=v;
		u+=u&(-u);
	}
}

int getsum(int u)
{
	int ans=0;
	while(u>=1)
	{
		ans+=C[u];
		u-=u&(-u);
	}
	return ans;
}

int getsum(int l,int r)
{
	return getsum(r)-getsum(l-1);
}

int ans[MAXM];
int main()
{
	freopen("diff.in","r",stdin);
	freopen("diff.out","w",stdout);
	scanf("%d",&N);
	map<int,int> table;
	map<int,int>::iterator it;
	for(int i=1;i<=N;i++)
	{
		scanf("%d",A+i);
		it=table.find(A[i]);
		if (it!=table.end())
			next[it->second]=i;
		else add(i,1);
		table[A[i]]=i;
	}
	scanf("%d",&M);
	vector<pair<pair<int,int>,int> > q(M);
	for(int i=0;i<M;i++)
	{
		scanf("%d%d",&q[i].first.first,&q[i].first.second);
		q[i].second=i;
	}
	sort(q.begin(),q.end());
	for(int i=1,j=0;i<=N;i++)
	{
		while(j<M && q[j].first.first==i)
		{
			ans[q[j].second]=getsum(q[j].first.first,q[j].first.second);
			j++;
		}
		add(i,-1);
		if (next[i])
			add(next[i],1);
	}
	for(int i=0;i<M;i++)
		printf("%d\n",ans[i]);
	return 0;
}
</pre>