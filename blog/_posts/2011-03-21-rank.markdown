---
author: admin
comments: true
date: 2011-03-21 23:38:46+00:00
layout: post
slug: rank
title: HAOI2008 排名系统
wordpress_id: 346
categories:
- 解题报告
tags:
- splay
- 平衡树
- 解题报告
---

裸数据结构题。来个平衡树维护分数，再来个hash维护每个名字对应的节点，完事了。
PS.zkw的splay的确比treap还快，以后就靠它了。

    
    
    /*
    ID: dxmtb
    PROG: HAOI2008 排名系统
    TIME: 2011.03.18
    STATE: Solved
    MEMO: hash+平衡树
    */
    #include <cstdio>
    #include <cstdlib>
    #include <string>
    using namespace std;
    
    const int MAXN=250005;
    const int oo=0x7fffffff;
    
    struct Node
    {
    	int id;
    	int key,T,size;
    	string name;
    	Node *c[2];
    	Node *rz(){return size=c[0]->size+1+c[1]->size,this;}
    	Node();
    	Node(int _key,int _T,Node *c0,Node *c1):key(_key),T(_T)
    	{
    		c[0]=c0;
    		c[1]=c1;
    	}
    	void *operator new(unsigned,void *p){return p;}
    }pool[MAXN],*mem=pool,Tnull,*null=&Tnull;
    
    Node::Node()
    {
    	id=this-pool;
    	c[0]=c[1]=null;
    }
    
    struct Splay
    {
    	Node *root;
    	Splay()
    	{
    		root=new (mem++)Node(*null);
    		root->key=oo;
    		root->rz();
    	}
    	void zig(bool d)
    	{
    		Node *p=root->c[d];
    		root->c[d]=null->c[d];
    		null->c[d]=root;
    		root=p;
    	}
    	void zigzig(bool d)
    	{
    		Node *p=root->c[d]->c[d];
    		root->c[d]->c[d]=null->c[d];
    		null->c[d]=root->c[d];
    		root->c[d]=root->c[d]->c[!d];
    		null->c[d]->c[!d]=root->rz();
    		root=p;
    	}
    	void finish(bool d)
    	{
    		Node *p=root->c[!d],*t=null->c[d];
    		while(t!=null)
    		{
    			t=null->c[d]->c[d];
    			null->c[d]->c[d]=p;
    			p=null->c[d]->rz();
    			null->c[d]=t;
    		}
    		root->c[!d]=p;
    	}
    	void select(int k)
    	{
    		int t;
    		while(true)
    		{
    			bool d=(k>(t=root->c[0]->size));
    			if (k==t || root->c[d]==null)
    				break;
    			if (d) k-=t+1;
    			bool dd=(k>(t=root->c[d]->c[0]->size));
    			if (k==t || root->c[d]->c[dd]==null)
    			{
    				zig(d);
    				break;
    			}
    			if (dd) k-=t+1;
    			if (d==dd) zigzig(d);
    			else zig(d),zig(dd);
    		}
    		finish(0);
    		finish(1);
    		root->rz();
    	}
    	void search(int x)
    	{
    		int t;
    		while(true)
    		{
    			bool d=(x>(t=root->key));
    			if (root->c[d]==null)
    				break;
    			bool dd=(x>(t=root->c[d]->key));
    			if (root->c[d]->c[dd]==null)
    			{
    				zig(d);
    				break;
    			}
    			if (d==dd) zigzig(d);
    			else zig(d),zig(dd);
    		}
    		finish(0);
    		finish(1);
    		root->rz();
    		if (x>root->key)
    			select(root->c[0]->size+1);
    	}
    	int rank(Node *p)
    	{
    		search(p->key);
    		find(p);
    		return root->c[0]->size+1;
    	}
    	void insert(int key,int T,char *str)
    	{
    		search(key+1);
    		root=new (mem++)Node(key,T,root->c[0],root);
    		root->name=str;
    		root->c[1]->c[0]=null;
    		root->c[1]->rz();
    		root->rz();
    	}
    	void find(Node *p)
    	{
    		int t;
    		int x=p->key,y=p->T;
    		while(true)
    		{
    			bool d=((x>(t=root->key))||(x==t&&y;>=root->T));
    			if (d && root->key==x && root->T==y)
    				break;
    			bool dd=((x>(t=root->c[d]->key))||(x==t&&y;>=root->c[d]->T));
    			if (dd && root->c[d]->key==x && root->c[d]->T==y)
    			{
    				zig(d);
    				break;
    			}
    			if (d==dd) zigzig(d);
    			else zig(d),zig(dd);
    		}
    		finish(0);
    		finish(1);
    		root->rz();
    	}
    	void erase(Node *p)
    	{
    		search(p->key);
    		find(p);
    		Node *oldroot=root;
    		root=root->c[1];
    		select(0);
    		root->c[0]=oldroot->c[0];
    		root->rz();
    	}
    	void selprint(int k)
    	{
    		select(k-1);
    		printf("%s ",root->name.c_str());
    		select(root->c[0]->size+1);
    		for(int i=1;i<10;i++)
    			if (root->key!=oo) 
    			{
    				printf("%s ",root->name.c_str());
    				select(root->c[0]->size+1);
    			}
    			else break;
    		printf("\n");
    	}
    }tree;
    
    struct HashNode
    {
    	string name;
    	int id;
    	HashNode *next;
    	HashNode(char *str,int _id,HashNode *_next):
    		name(str),id(_id),next(_next){}
    };
    
    struct Hash
    {
    #define MO 1741013
    	HashNode *adj[MO];
    	unsigned hash(char *str)
    	{
    		unsigned seed=131;
    		unsigned ans=0;
    		while(*str)
    			ans=ans*seed+(*str++);
    		return (ans&oo;)%MO;
    	}
    	HashNode *at(char *str,int id)
    	{
    		int u=hash(str);
    		for(HashNode *p=adj[u];p;p=p->next)
    			if (p->name==str)
    				return p;
    		adj[u]=new HashNode(str,id,adj[u]);
    		return NULL;
    	}
    
    }book;
    
    int main()
    {
    	freopen("rank.in","r",stdin);
    	freopen("rank.out","w",stdout);
    	int N;
    	scanf("%d",&N;);
    	for(int i=1;i<=N;i++)
    	{
    		char com[10];
    		int score;
    		scanf(" %s",com);
    		if (com[0]=='?')
    		{
    			if (!(com[1]>='0'&&com;[1]<='9'))
    				printf("%d\n",tree.rank(&pool;[book.at(com+1,oo)->id]));
    			else
    			{
    				sscanf(com+1,"%d",&score;);
    				tree.selprint(score);
    			}
    		}
    		else
    		{
    			scanf("%d",&score;);
    			HashNode *id=book.at(com+1,mem-pool);
    			if (id!=NULL) 
    			{
    				tree.erase(&pool;[id->id]);
    				id->id=mem-pool;
    			}
    			tree.insert(-score,i,com+1);
    		}
    	}
    	exit(0);
    }
    
    
