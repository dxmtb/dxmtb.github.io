---
author: admin
comments: true
date: 2011-03-21 23:54:13+00:00
layout: post
slug: parterre
title: HAOI2007 修筑绿化带
wordpress_id: 352
categories:
- 解题报告
tags:
- haoi
- 单调队列
- 解题报告
---

枚举大矩形的左上角，求出给定区域内最小的小矩形，单调队列搞一下就行了。注意大小矩形边界不能重合。

    
    
    /*
    ID: dxmtb
    PROG: HAOI2007 修筑绿化带
    TIME: 2011.03.19
    STATE: Solved
    MEMO: dp+单调队列
    */
    #include <cstdio>
    #include <deque>
    using namespace std;
    const int MAXN=1005;
    
    int a[MAXN][MAXN];
    int N,M,A,B,C,D;
    int s[MAXN][MAXN],sr[MAXN][MAXN],s1[MAXN][MAXN],s2[MAXN][MAXN];
    int re;
    
    int main()
    {
    	freopen("parterre.in","r",stdin);
    	freopen("parterre.out","w",stdout);
    	scanf("%d%d%d%d%d%d",&M;,&N;,&A;,&B;,&C;,&D;);
    	for(int i=1;i<=M;i++)
    		for(int j=1;j<=N;j++)
    			scanf("%d",a[i]+j);
    	for(int i=1;i<=M;i++)
    		for(int j=1;j<=N;j++)
    			sr[i][j]=sr[i][j-1]+a[i][j];
    	for(int i=1;i<=M;i++)
    		for(int j=1;j<=N;j++)
    			s[i][j]=s[i-1][j]+sr[i][j];
    	for(int i=1;i+A-1<=M;i++)
    		for(int j=1;j+B-1<=M;j++)
    			s1[i][j]=s[i+A-1][j+B-1]-s[i+A-1][j-1]-s[i-1][j+B-1]+s[i-1][j-1];
    	for(int i=1;i+C-1<=M;i++)
    		for(int j=1;j+D-1<=M;j++)
    			s2[i][j]=s[i+C-1][j+D-1]-s[i+C-1][j-1]-s[i-1][j+D-1]+s[i-1][j-1];
    	deque<pair<int,int> > p[MAXN];
    	for(int j=2;j+D-1<=N-1;j++)
    		for(int i=A-C-1;i>=2;i--)
    			if (p[j].empty() || s2[i][j]<p[j].front().first)
    				p[j].push_front(make_pair(s2[i][j],i));
    	for(int i=1;i+A-1<=M;i++)
    	{
    		for(int j=2;j+D-1<=N-1;j++)
    		{
    			while(p[j].size() && p[j].front().second<=i)
    				p[j].pop_front();
    			int t=s2[i+A-C-1][j];
    			while(p[j].size() && t<p[j].back().first)
    				p[j].pop_back();
    			p[j].push_back(make_pair(t,i+A-C-1));
    		}
    		deque<pair<int,int> > q;
    		for(int j=B-D-1;j>=2;j--)
    		{
    			int t=p[j].front().first;
    			if (t<q.front().first)
    				q.push_front(make_pair(t,j));
    		}		
    		for(int j=1;j+B-1<=N;j++)
    		{
    			while(q.size() && q.front().second<=j)
    				q.pop_front();
    			int t=p[j+B-D-1].front().first;
    			while(q.size() && q.back().first>t)
    				q.pop_back();
    			q.push_back(make_pair(t,j+B-D-1));
    			if (s1[i][j]-q.front().first>re)
    				re=s1[i][j]-q.front().first;
    		}
    	}
    	printf("%d\n",re);
    	exit(0);
    }
    
